version: 2.1
orbs:
  codeartifact: visualfabriq/codeartifact@1.0.0
  coverage-reporter: codacy/coverage-reporter@13.6.0

jobs:
  test:
    executor: codeartifact/default
    parameters:
      with-coverage:
        description: Coverage reporting flag
        type: boolean
        default: false
      runtime:
        description: Python runtime version
        type: string
        default: "3.7"
    docker:
      - image: cimg/python:<<parameters.runtime>>

    working_directory: ~/parquery
    steps:
      - checkout
      - run:
          name: Activate virtualenv
          command: virtualenv ~/venv

      - restore_cache:
          keys:
            - << parameters.runtime >>-v1-dependecies-{{ checksum "setup.py" }}
            - << parameters.runtime >>-v1-dependecies

      - codeartifact/init:
          tool: pip

      - run:
          name: Install dependencies
          command: |
            ~/venv/bin/pip install .[test]
    

      # Save the cached dependencies
      - save_cache:
          key: << parameters.runtime >>-v1-dependecies-{{ checksum "setup.py" }}
          paths:
            - ~/venv

      # Save git revision info
      - run:
          name: save GIT revision info
          command: |
            git rev-parse HEAD > git_hash.txt

      - run:
          name: set variables
          command: |
            # Enable debug mode
            export LOG_LEVEL=debug

      - when:
          condition:
            not: << parameters.with-coverage >>
          steps:
            - run:
                name: Run tests
                command: ~/venv/bin/python -m pytest tests
      - when:
          condition: << parameters.with-coverage >>
          steps:
            - run:
                name: Run tests with coverage reporting
                command: |
                  ~/venv/bin/python -m coverage run -m \
                    pytest tests --junitxml=test-results/pytest/pytest-report.xml
                  ~/venv/bin/python -m coverage xml -o cobertura.xml
            - store_test_results:
                path: test-results
            - store_artifacts:
                path: test-results
            - coverage-reporter/send_report

  build-and-push:
    executor: codeartifact/default
    parameters:
      is-pre-release:
        description: if true the version tag will contain the branch
        type: boolean
        default: false
    steps:
      - checkout
      - codeartifact/init:
          tool: pip
      - run:
          name: Build
          command: |
            if [[ "<< parameters.is-pre-release >>" == true ]]; then
              DEV_VERSION=$((16#${CIRCLE_SHA1:0:6}))
              export PRE_RELEASE_VERSION=".dev${DEV_VERSION}"
            fi
            pip install build
            python -m build
      - codeartifact/push:
          tool: twine

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - test:
          context: codeartifact-dev
          name: py2
          runtime: "2.7"
      - test:
          context: codeartifact-dev
          name: py3
          with-coverage: true
      - build-and-push:
          context: codeartifact-dev
          requires:
            - py2
            - py3
          filters:
            branches:
              only:
                - master
                - main
      - build-and-push:
          context: codeartifact-dev
          requires:
            - py2
            - py3
          is-pre-release: true
          filters:
            branches:
              only:
                - uat

  daily:
    triggers:
      - schedule:
          cron: "0 10 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test:
          context: codeartifact-dev
          name: py2
          runtime: "2.7"
      - test:
          context: codeartifact-dev
          name: py3
          with-coverage: true
      - build-and-push:
          context: codeartifact-dev
          requires:
            - py2
            - py3
          filters:
            branches:
              only:
                - master
                - main
